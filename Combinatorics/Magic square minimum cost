#include<bits/stdc++.h>
using namespace std;
bool is_magic_square(vector<int>v)
{
    int a[3][3],i,j;

    for(i = 0; i<3 ; i++)
    {
        for(j = 0 ; j<3 ; j++)
        {
            a[i][j] = v[3*i+j];
        }
    }

    int s = 0;
    int tmp = 0;
    for(i = 0 ; i<3 ; i++)
    {
        s += a[0][i];
    }

    for( i = 1 ; i<3 ; i++)
    {
        tmp = 0;
        for(j = 0 ; j<3 ; j++)
        {
           tmp += a[i][j];
        }
        if(tmp != s) return 0;
    }

    for(j = 0; j<3 ; j++)
    {
        tmp = 0;
        for( i = 0 ; i<3 ; i++)
        {
            tmp += a[i][j];
        }
        if( tmp != s) return 0;
    }

    tmp = 0;
    for(i = 0; i<3 ; i++)
    {
        tmp += a[i][i];
    }
    if(tmp != s) return 0;

    tmp = 0;
    for(i = 0 ; i<3 ; i++)
    {
        tmp += a[i][2-i];
    }
    if(tmp != s) return 0;
    return 1;
}

void find_magic_squares(vector<vector <int> >& magic_squares)
{
    vector<int> v;
    for(int  i = 1 ; i<=9 ; i++)
    {
        v.push_back(i);
    } 

    do{
        if(is_magic_square(v)) magic_squares.push_back(v);

    }while(next_permutation(v.begin(),v.end()));
}

int diff(vector<int> a , vector<int>b)
{
    int res = 0;
    for( int i=0 ; i<9 ; i++)
    {
        res += abs(a[i]-b[i]);
    }
    return res;
}

int wrapper (vector<int> v)
{
    int res = INT_MAX;
    vector< vector<int> >magic_squares;
    find_magic_squares(magic_squares);

    for(int i = 0 ; i<magic_squares.size(); i++)
    {
        res = min(res,diff(v,magic_squares[i]));
    }
    return res;

}

int main(void)
{
    vector<int> v;
    int a,i;
    for(i = 0 ; i<9 ; i++)
    {
        scanf("%d",&a);
        v.push_back(a);
    }
    printf("%d",wrapper(v));
}
